<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<ndbx formatVersion="0.9" type="file">
  <node name="generator" prototype="builtins.root" rendered="true" type="nodebox.graphics.Image" x="20" y="10">
    <description>Template for nodes that create image data.</description>
    <param name="_code">
      <value type="python"><![CDATA[# This node serves as a template for writing image generators.
# It takes an image stored in the same directory as the Core Image library
# and returns that as an Image object.
import os.path
from nodebox.graphics import Image

def cook(self):
    # Resource management is severly lacking at the moment. 
    # Before we can determine the library file, we need to make sure
    # we're referring to the correct library. If you create a new instance
    # of this node in another library, the self.node is going to point
    # to the wrong library.
    # Traverse up the prototype hierarchy to find the Core Image library.
    proto = self.node
    library = proto.library
    while proto.library.name != 'coreimage':
        proto = self.node.prototype
    
    # Once we have the correct prototype, find the library file.
    dir, fname = os.path.split(proto.library.file.absolutePath)
    # The image is in the same directory as the library file.
    img_name = os.path.join(dir, "ferris_wheel.jpg")
    return Image(img_name)]]></value>
    </param>
    <param name="_image">
      <value>generator.png</value>
    </param>
  </node>
  <node name="filter" prototype="generator" x="20" y="100">
    <description>Template for node that manipulates image data.</description>
    <port name="image"/>
    <param name="_code">
      <value type="python"><![CDATA[# Template code for writing your own image filters.
# We currently have no support at all in NodeBox for writing image filters,
# so the method below is not officially supported and may change in the future.
# We use Java's AWT support for manipulating images.
from nodebox.graphics import Image
from java.awt.image import Kernel, ConvolveOp, BufferedImage

def cook(self):
    # Check if an image is connected.
    if self.image is None: return None
    # Create a convolution kernel.
    kernel = Kernel(3, 3, 
        [0, 1, 0, 
         1, -3, 1, 
         0, 1, 0])
    # Wrap the kernel in a convolve operation.
    cop = ConvolveOp(kernel)
    # Get the internal image. This is the unsupported part.
    awt_image = self.image.awtImage
    # Create a new image that will hold the filtered image data.
    new_image = BufferedImage(awt_image.width, awt_image.height, BufferedImage.TYPE_INT_ARGB)
    # Create a new NodeBox image with the result of the convolution.
    return Image(cop.filter(awt_image, new_image))]]></value>
    </param>
    <param name="_image">
      <value>filter.png</value>
    </param>
  </node>
</ndbx>
