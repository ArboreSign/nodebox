<?xml version="1.0" encoding="UTF-8"?>
<ndbx formatVersion="0.9" type="file">
<node name="compound1" prototype="corevector.compound" rendered="true" x="420" y="30">
<param name="function">
<value>subtracted</value>
</param>
<param name="fill">
<value>#c7ca41ff</value>
</param>
<param name="strokeWidth">
<value>0.25</value>
</param>
</node>
<node name="grid1" prototype="corevector.grid" x="100" y="180">
<param name="width">
<value>200.0</value>
</param>
<param name="height">
<value>100.0</value>
</param>
<param name="rows">
<value>15</value>
</param>
<param name="columns">
<value>30</value>
</param>
</node>
<node name="place1" prototype="corevector.place" x="260" y="30">
<param name="_code">
<value type="python"><![CDATA[from nodebox.node import StampExpression
from nodebox.graphics import Path, Geometry, Transform

def cook(self):
  if self.shape is None: return None
  if self.template is None: return self.shape.clone()

  if self.stamp:
      stamp = StampExpression(self.node, "expr")
  g = Geometry()
  for i, point in enumerate(self.template.points):
      if self.stamp:
          context.put('CNUM', i)
          stamp.evaluate(context)
          self.node.stampExpressions(context)
      t = Transform()
      t.translate(point.x, point.y)
      newShape = t.map(self.shape)
      g.extend(newShape)
  return g]]></value>
</param>
<param name="stamp">
<value>1</value>
</param>
<param name="expr">
<value>big=random(CNUM,5,20)</value>
</param>
</node>
<node name="rect1" prototype="corevector.rect" x="20" y="30">
<param name="_code">
<value type="python"><![CDATA[from nodebox.graphics import Path

def cook(self):
    p = Path()
    if self.rx == 0 and self.ry == 0:
        p.rect(self.x, self.y, self.width, self.height)
    else:
        p.roundedRect(self.x, self.y, self.width, self.height, self.rx, self.ry)
    p.fillColor = self.fill
    if self.strokeWidth > 0:
        p.strokeColor = self.stroke
        p.strokeWidth = self.strokeWidth
    else:
        p.strokeColor = None
    return p.asGeometry()]]></value>
</param>
<param name="width">
<expression>stamp('big',10)/3</expression>
</param>
<param name="height">
<expression>stamp('big',10)</expression>
</param>
</node>
<node name="textpath1" prototype="corevector.textpath" x="110" y="330">
<param name="text">
<value>txtFX</value>
</param>
<param name="font">
<value>Arial Black</value>
</param>
<param name="size">
<value>70.0</value>
</param>
<param name="y">
<value>25.0</value>
</param>
</node>
<node name="transform1" prototype="corevector.transform" x="210" y="330">
<param name="sy">
<value>213.0</value>
</param>
</node>
<node name="transform2" prototype="corevector.transform" x="110" y="30"/>
<conn input="transform2" output="rect1" port="shape"/>
<conn input="transform1" output="textpath1" port="shape"/>
<conn input="compound1" output="place1" port="shapeB"/>
<conn input="compound1" output="transform1" port="shape"/>
<conn input="place1" output="grid1" port="template"/>
<conn input="place1" output="transform2" port="shape"/>
</ndbx>
